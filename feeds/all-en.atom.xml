<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Byteweise</title><link href="/" rel="alternate"></link><link href="/feeds/all-en.atom.xml" rel="self"></link><id>/</id><updated>2015-05-24T10:50:00+02:00</updated><entry><title>My SICP journey</title><link href="/my-sicp-journey.html" rel="alternate"></link><updated>2015-05-24T10:50:00+02:00</updated><author><name></name></author><id>tag:,2015-05-24:my-sicp-journey.html</id><summary type="html">
&lt;div id="content"&gt;
&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;Was ist SICP?&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
SICP ist die Abkürzung für das Buch "Structure and Interpretation of Computer
Programs" das aus einem Computer Science Kurs des MIT entstanden ist. Trotz
seines Alters (2. Edition ist von 1996), wird es immer wieder empfohlen und
hochgelobt und als &lt;b&gt;DAS&lt;/b&gt; Programmierer Buch schlechthin beschrieben. Eine große
Hürde ist, dass das Buch die Programmiersprache Scheme verwendet, die viele
heutzutage nicht kennen. Außerdem soll es einen relativ hohen Anspruch
haben. Durch Emacs habe ich Elisp kennengelernt, eine Sprache die mit Lisp
verwandt ist und da Scheme ein Lisp Dialekt ist, habe ich beschlossen zu
versuchen ob ich mit dem Buch klar komme. Meine Ergebnisse dieser
Erkundungsreise werde ich nach und nach hier auf meinem Blog
veröffentlichen.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;Herangehensweise&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
Das Buch ist Online in mehreren Versionen frei verfügbar (&lt;a href="https://sicpebook.files.wordpress.com/2011/06/sicp.pdf"&gt;pdf&lt;/a&gt;, &lt;a href="https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-4.html"&gt;html&lt;/a&gt;,
&lt;a href="https://xuanji.appspot.com/isicp/index.html"&gt;interactive-version&lt;/a&gt;, &lt;a href="http://www.neilvandyke.org/sicp-texi/sicp.info.gz"&gt;info&lt;/a&gt;).  Für mich ist besonders die info Version
interessant, da ich das Buch so in Emacs lesen kann und die Codebeispiele bequem
kopieren und ausführen kann.
&lt;/p&gt;

&lt;p&gt;
Es gibt eine Reihe von Online Kursen, deren Materialien man nutzen kann:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://edge.edx.org/courses/course-v1:UCBerkeley+CS61AS+Spring_2015/about"&gt;Berkley Course Material&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://webcast.berkeley.edu/playlist#c,d,Computer_Science,3E89002AA9B9879E"&gt;Berkley Lecture Videos&lt;/a&gt; 
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://aduni.org/courses/sicp/index.php?view=cw"&gt;ADUni Course Material + Lecture Videos&lt;/a&gt; 
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-001-structure-and-interpretation-of-computer-programs-spring-2005/index.htm"&gt;MIT Course Material + Lecture Videos&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Außerdem gibt es eine Reihe von anderen Bloggern die bereits dasselbe Projekt
unternommen haben:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://eli.thegreenplace.net/tag/sicp"&gt;Eli Bendersky&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.billthelizard.com/2009/10/sicp-challenge.html"&gt;Bill the Lizard&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://wiki.drewhess.com/wiki/Category:SICP_solutions"&gt;Drewiki&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wqzhang.wordpress.com/sicp-solutions/"&gt;Weiqun Zhang&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;
Mein eigener Plan ist wie folgt:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Durcharbeiten des Buches 
&lt;/li&gt;
&lt;li&gt;Anschauen der Kurs Videos
&lt;/li&gt;
&lt;li&gt;Lösen der Übungen
&lt;/li&gt;
&lt;li&gt;Durchgehen der Lösungen der anderen Blogger
&lt;/li&gt;
&lt;li&gt;Die Übungen der Kurse durchgehen 
&lt;/li&gt;
&lt;li&gt;Die Examen der Kurse durchgehen
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Mal sehen wie weit ich komme :)
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-3" class="outline-2"&gt;
&lt;h2 id="sec-3"&gt;Setup&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;p&gt;
Wie bereits erwähnt werde ich Emacs nutzen. Scheme wird von Emacs von Haus aus
unterstützt.  Man muss nur Scheme systemseitig installieren:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-sh"&gt;sudo apt-get install mit-scheme
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Hier ist die Anleitung um die Info Node des Buches zu installieren:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-sh"&gt;wget http://www.neilvandyke.org/sicp-texi/sicp.info.gz
gunzip sicp*
sudo cp sicp.info /usr/share/info
sudo install-info --info-dir=/usr/share/info sicp.info
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Der Kurs von Berkley benutzt eine &lt;a href="https://inst.eecs.berkeley.edu/~scheme/"&gt;modifizierte&lt;/a&gt; Scheme Version, die Installation
ist auf der Website beschrieben.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary></entry><entry><title>Emacs Rocks - Part 1</title><link href="/emacs-rocks-part-1.html" rel="alternate"></link><updated>2015-05-20T21:28:00+02:00</updated><author><name></name></author><id>tag:,2015-05-20:emacs-rocks-part-1.html</id><summary type="html">
&lt;div id="content"&gt;
&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;Was ist Emacs&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
Wer sich mit Freier Software beschäftigt, hat vielleicht schon einmal von GNU
Emacs gehört. Falls nicht, es handelt sich um einen &lt;b&gt;sehr&lt;/b&gt; flexiblen
Texteditor. So flexibel, dass manche ihr Betriebsystem lediglich als Bootloader
betrachten, das nur dazu dient Emacs zu starten. Das mag ein wenig übertrieben
sein, aber fest steht, Emacs lässt sich auf &lt;b&gt;vielfältige&lt;/b&gt; Weise für Aufgaben vor
dem Bildschirm verwenden. Beispiele dazu findet man im nächsten Abschnitt.
&lt;/p&gt;

&lt;p&gt;
Leider ist die Lernkurve relativ steil, was es Neulingen oft erschwert einen
Zugang zu finden. Auch ist es schwierig Emacs wirklich effektiv zu nutzen ohne
ein wenig über die interne Programmiersprache von Emacs (&lt;code&gt;Elisp&lt;/code&gt;) zu lernen.  Aber
für Menschen die viel mit dem Computern arbeiten, zahlt sich die Mühe auf lange
Sicht mehr als aus. Ich gehe im Folgendem noch darauf ein, warum es sich
wirklich lohnt.
&lt;/p&gt;

&lt;p&gt;
Ein gute Sache ist außerdem, dass dieses Wissen mit hoher Wahrscheinlichkeit ein
Leben lang von Nutzen bleibt, denn die erste öffentliche Version von GNU Emacs
erschien bereits im Jahr 1985 und es existiert eine große Community, welche die
Weiterentwicklung von Emacs bis zum heutigen Tag aktiv vorantreibt. Es ist nicht
abzusehen, dass sich dies in nächster Zeit ändert.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;Anwendungsbeispiele&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
&lt;i&gt;Was kann man mit Emacs alles machen?&lt;/i&gt; Die Frage lässt sich nicht so leicht
beantworten, denn man kann wirklich sehr viel mit Emacs machen :). Das liegt
daran, dass Emacs programmierbar ist und man Programme in der Editor eigenen
Programmiersprache &lt;code&gt;Elisp&lt;/code&gt; schreiben kann. Damit lassen sich sowohl vom Editor
unabhängige Skripte schreiben, als auch Module schreiben, welche die
Editorumgebung beliebig anpassen.
&lt;/p&gt;

&lt;p&gt;
Am häufigsten wird Emacs wahrscheinlich von Programmierern genutzt. Aber Emacs
hat durchaus auch für nicht Programmierende viel zu bieten. Hier ist eine Liste
mit Beispielen, wozu ich Emacs nutze:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;Editor (Text, IDE, Literate Programming, Latex)
&lt;/li&gt;
&lt;li&gt;Dateimanager
&lt;/li&gt;
&lt;li&gt;Terminal Emulator
&lt;/li&gt;
&lt;li&gt;Feedreader
&lt;/li&gt;
&lt;li&gt;Email Client
&lt;/li&gt;
&lt;li&gt;IRC Client
&lt;/li&gt;
&lt;li&gt;Notizverwaltung
&lt;/li&gt;
&lt;li&gt;Git Interface
&lt;/li&gt;
&lt;li&gt;Static Site Generator
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;
Es gibt noch viele weitere Anwendungsmöglichkeiten von Emacs. Eine weit
verbreitete ist z.B. Emacs als Organizer zu nutzen. Neulich stieß ich auf einen
interessanten &lt;a href="http://www.huffingtonpost.com/quora/how-do-blind-computer-pro_b_7163674.html"&gt;Artikel&lt;/a&gt; in dem ein Blinder beschreibt wie er Emacs nutzt, um damit
zu programmieren. Wer möchte kann sich mit den folgenden Videos einen
konkreteren Eindruck verschaffen:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=B6jfrrwR10k"&gt;Einführung und Demonstration - Video&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://emacsrocks.com/"&gt;Emacs als Programmiereditor - Video&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Und in &lt;a href="http://www.howardism.org/Technical/Emacs/new-window-manager.html"&gt;diesem&lt;/a&gt; bebilderten Blog Post sieht man ein paar weitere Beispiele. 
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;div id="outline-container-sec-3" class="outline-2"&gt;
&lt;h2 id="sec-3"&gt;Installation&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;p&gt;
Den Tarball findet man man auf dem &lt;a href="http://ftpmirror.gnu.org/emacs/emacs-24.5.tar.gz"&gt;FTP&lt;/a&gt; der &lt;a href="https://www.gnu.org/"&gt;FSF&lt;/a&gt;. Falls man Git benutzt, kann
man sich das Emacs Repository auch direkt &lt;a href="http://savannah.gnu.org/projects/emacs/"&gt;klonen&lt;/a&gt;:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-sh"&gt;$ git clone git://git.sv.gnu.org/emacs.git
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Falls man sich den Tarball geladen hat, kann man diesen über
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre class="src src-sh"&gt;$ tar xzvf emacs-24.5.tar.gz
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
entpacken.
&lt;/p&gt;

&lt;p&gt;
Dann muss man noch schnell ein paar Abhängigkeiten installieren. Für Debian
basierte Systeme geht dies mit
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre class="src src-sh"&gt;$ sudo apt-get install build-essential
$ sudo apt-get build-dep emacs24
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Für Red-Hat basierte Systeme
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre class="src src-sh"&gt;$ sudo yum groupinstall &amp;#8220;Development Tools&amp;#8221;
$ sudo yum install yum-utils
$ sudo yum-builddep emacs
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Nach dem Wechsel in das Emacs Verzeichnis muss man dann noch folgende
Kommandos ausführen 
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre class="src src-sh"&gt;$ ./autogen.sh
$ ./configure
$ make
$ sudo make install
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
um Emacs zu installieren.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-sec-4" class="outline-2"&gt;
&lt;h2 id="sec-4"&gt;Initial Setup&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-4"&gt;
&lt;p&gt;
Barebone Emacs ist zwar gut und schön aber da Emacs freie Software ist gibt es
viele nützliche Erweiterungen die man sich installieren kann. Das geht ganz
einfach über den integrierten Paketmanager. Oder aber man nutzt eines der vielen
Starter-Kits bei denen schon viele Erweiterungen vorinstalliert sind und ein
Reihe von Emacs Konfigurationen angepasst worden sind. 
&lt;/p&gt;

&lt;p&gt;
Ich finde die Starter-Kits sind eine gute Sache, aber auf Lange Sicht ist es
wohl besser die Konfiguration selbst vorzunehmen, damit man lernt wie Emacs
funktioniert und seine eigenen Konfigurationswünsche umsetzen kann.
&lt;/p&gt;

&lt;p&gt;
Hier sind drei bekannte Starter-Kits:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/eschulte/emacs24-starter-kit/"&gt;Emacs 24 Starter Kit &lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/bbatsov/prelude"&gt;Emacs Prelude&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/syl20bnr/spacemacs"&gt;Spacemacs&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Wer lieber kein Starter-Kit Nutzen möchte der sollte sich zunächst den
Paketmanager konfigurieren um Erweiterungen installieren zu können. Dazu muss
man im &lt;code&gt;HOME&lt;/code&gt; Verzeichnis die Konfigurationsdatei &lt;code&gt;.emacs&lt;/code&gt; erstellen und sie mit
folgenden Inhalt füllen:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #F0DFAF; font-weight: bold;"&gt;require&lt;/span&gt; '&lt;span style="color: #BFEBBF;"&gt;package&lt;/span&gt;)
(setq package-enable-at-startup nil)
(package-initialize)

(add-to-list 'package-archives
             '(&lt;span style="color: #CC9393;"&gt;"melpa"&lt;/span&gt; .
               &lt;span style="color: #CC9393;"&gt;"http://melpa.milkbox.net/packages/"&lt;/span&gt;) t)

(add-to-list 'package-archives 
             '(&lt;span style="color: #CC9393;"&gt;"marmalade"&lt;/span&gt; . &lt;span style="color: #CC9393;"&gt;"http://marmalade-repo.org/packages/"&lt;/span&gt;))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Die Datei wird beim starten von Emacs geladen. Damit hat man zwei der
populärsten Hoster von Emacs Paketen hinzugefügt. 
&lt;/p&gt;

&lt;p&gt;
Alternativ kann man auch die Datei &lt;code&gt;.init.el&lt;/code&gt; im Verzeichnis &lt;code&gt;~/.emacs.d&lt;/code&gt; nutzen,
falls man keine Konfigurationsdateien auf dem Top Level des &lt;code&gt;HOME&lt;/code&gt; Verzeichnisses
mag.
&lt;/p&gt;

&lt;p&gt;
Wie man Pakete installiert und konfiguriert beschreibe ich in den kommenden Artikeln.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-sec-5" class="outline-2"&gt;
&lt;h2 id="sec-5"&gt;Wie lerne ich mehr über Emacs?&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-5"&gt;
&lt;p&gt;
Abonniere meinen Blog Feed ;) Ich plane noch viel Beiträge über Emacs zu
schreiben. Wer nicht warten möchte und des Englischen mächtig ist, für den
stehen eine Reihe von Resourcen aus dem Netz zur Verfügung:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://www.youtube.com/playlist?list=PLxj9UAX4Em-IiOfvF2Qs742LxEK4owSkr"&gt;Video&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://emacslife.com/"&gt;Text&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.ibm.com/developerworks/views/aix/libraryview.jsp?search_by=emacs+editing+environment"&gt;Text&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://david.rothlis.net/emacs/howtolearn.html"&gt;Text&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tuhdo.github.io/index.html"&gt;Text&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary></entry><entry><title>Emacs Rocks - Part 2</title><link href="/emacs-rocks-part-2.html" rel="alternate"></link><updated>2015-05-13T03:46:00+02:00</updated><author><name></name></author><id>tag:,2015-05-13:emacs-rocks-part-2.html</id><summary type="html">
&lt;div id="content"&gt;
&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;In Bearbeitung&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
Test Test
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary></entry></feed>